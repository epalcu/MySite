name: Create Release

on:
  workflow_dispatch:
  push:
    branches:
      - master
    paths:
      - '**/*.wixproj'

jobs:
  create_release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: read

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install xmlstarlet
        run: sudo apt-get update && sudo apt-get install -y xmlstarlet

      - name: Extract version from .wixproj
        id: version
        run: |
          FILE="./WiX/WiX.wixproj"
          VERSION=$(xmlstarlet sel -t -v "//Version" "$FILE")
          echo "Version from .wixproj: $VERSION"
          echo "VERSION=$VERSION" >> $GITHUB_ENV

      - name: Find last merged PR with 'Bump Version' in title and check for existing release
        id: find_pr_and_release
        uses: actions/github-script@v7
        with:
          result-encoding: string
          script: |
            // 1. Find last merged PR with 'Bump Version' in title (case-insensitive)
            const prs = await github.rest.pulls.list({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'closed',
              base: 'master',
              sort: 'updated',
              direction: 'desc',
              per_page: 20,
            });

            const bumpPr = prs.data.find(pr =>
              pr.merged_at &&
              pr.title.toLowerCase().includes('bump version')
            );

            if (!bumpPr) {
              core.setFailed("No merged PR with 'Bump Version' found.");
              return;
            }

            // Extract version number from PR title (expecting format like "Bump version to 1.2.3")
            const versionMatch = bumpPr.title.match(/(\d+\.\d+\.\d+)/);
            if (!versionMatch) {
              core.setFailed("Could not extract version from PR title.");
              return;
            }
            const version = versionMatch[1];

            // Extract Release Notes from the bump version PR body
            // The bump-version.yml creates PRs with format:
            // **Release Notes**:
            // {actual notes}
            const body = bumpPr.body || "";
            
            // Match the specific format used by bump-version.yml
            const releaseNotesMatch = body.match(/\*\*Release Notes\*\*:\s*\n([\s\S]*?)$/);
            
            const releaseNotes = releaseNotesMatch ? releaseNotesMatch[1].trim() : "No release notes found in PR.";

            // 2. Check if a release with tag 'v{version}' already exists
            try {
              await github.rest.repos.getReleaseByTag({
                owner: context.repo.owner,
                repo: context.repo.repo,
                tag: `v${version}`
              });
              core.info(`Release v${version} already exists, skipping release creation.`);
              core.setOutput('release_exists', 'true');
            } catch (error) {
              if (error.status === 404) {
                core.info(`No existing release for v${version}. Proceeding to create.`);
                core.setOutput('release_exists', 'false');
                core.setOutput('version', version);
                core.setOutput('pr_body', releaseNotes);
              } else {
                throw error;
              }
            }
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create GitHub Release
        if: steps.find_pr_and_release.outputs.release_exists == 'false'
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ steps.find_pr_and_release.outputs.version }}
          name: v${{ steps.find_pr_and_release.outputs.version }}
          body: |
            ## Release Notes
            
            ${{ steps.find_pr_and_release.outputs.pr_body }}
          generate_release_notes: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}